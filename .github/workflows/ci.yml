---
name: CI

on:
  push:
    branches:
      - main
      - stable/*
      - release-*
  pull_request: {}
  merge_group: {}
  workflow_dispatch: {}

# Limit workflow to 1 concurrent run per ref (branch): new commit -> old runs are canceled to save costs
# Exception for main branch: complete builds for every commit needed for confidenence
# Exception for deploy jobs that have to wait for each other to avoid overwriting
concurrency:
  cancel-in-progress: true
  group: ${{ format('{0}-{1}', github.workflow, github.ref == 'refs/heads/main' && github.sha || github.ref) }}

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"

jobs:
  check-results:
    # Used by the merge queue to check all tests, including the unit test matrix.
    # New test jobs must be added to the `needs` lists!
    # This name is hard-coded in the branch rules; remember to update that if this name changes
    if: always()
    runs-on: ubuntu-latest
    outputs:
      flakyUnitTests: ${{ needs.java-unit-tests.outputs.flakyTests }}
      flakyITs: ${{ needs.integration-tests.outputs.flakyTests }}
      hasCanceled: ${{ (contains(needs.*.result, 'cancelled') && 1) || 0 }}
      hasFailed: ${{ (contains(needs.*.result, 'failure') && 1) || 0 }}
    steps:
      - uses: actions/checkout@v4
      - name: Check for aborted jobs
        continue-on-error: true
        uses: ./.github/actions/observe-aborted-jobs
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - run: exit 1

  notify-if-failed:
    name: Send slack notification on build failure
    runs-on: ubuntu-latest
    needs: [ check-results ]
    if: failure()
    steps:
      - id: notify-message
        run: echo "BUILD_OUTPUT_FILE_PATH=${{ (needs.check-results.outputs.hasCanceled && 'canceled') || (needs.check-results.outputs.hasFailed && 'failed') || 'wtf' }}" >> $GITHUB_ENV

      - id: slack-notify
        name: Send slack notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": ":alarm: CHRIS IS TESTING SOMETHING Build on `main` failed! :alarm:\n${{ github.event.head_commit.url }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: CHRIS IS TESTING SOMETHING Build on `main` failed !!!!! Was canceled: ${{ env.HAS_CANCELED }} has failed: ${{ env.HAS_FAILED }}:alarm:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check the related commit: ${{ github.event.head_commit.url }}\n \\cc @zeebe-medic"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Detected flaky unit tests:* \n ${{ env.FLAKY_UNIT_TESTS }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Detected flaky integration tests:* \n ${{ env.FLAKY_ITS }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          FLAKY_UNIT_TESTS: ${{needs.check-results.outputs.flakyUnitTests}}
          FLAKY_ITS: ${{needs.check-results.outputs.flakyITs}}
          #NOTIFY_TYPE: ${{ (needs.check-results.outputs.hasCanceled && "canceled") || (needs.check-results.outputs.hasFailed && "failed") || "wtf" }}
          HAS_CANCELED: ${{needs.check-results.outputs.hasCanceled}}
          HAS_FAILED: ${{needs.check-results.outputs.hasFailed}}
